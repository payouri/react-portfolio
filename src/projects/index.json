[
    {
        "directory": "BeatMaker_Keyboard",
        "path": "/BeatMaker_Keyboard",
        "name": "BeatMaker Keyboard",
        "category": "experiments",
        "link": null,
        "codepen": "",
        "gridBackground": false
    },
    {
        "directory": "js_utils",
        "path": "/js_utils",
        "name": "Javascript Utils",
        "category": "library",
        "jumboType": "background",
        "link": "codepen",
        "github": "",
        "codepen": "https://codepen.io/Zorlimar/pen/vQQmOo",
        "gridBackground": false
    },
    {
        "directory": "minimal_statestore",
        "path": "/minimal_statestore",
        "name": "Minimal StateStore",
        "body": "##  What \r\n I first started this project to better understand the observer pattern then I started using it for designing reusable web components.\r\n This is a small library of **~11kb** and as is name suppose is a state store so what does it mean? For short it's role is to hold data and to trigger logic when stored data is updated.\r\n## How\r\nThis project leverage javascript [ES6 Proxy](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Proxy) for the reactive part it watches an internal state object. This internal state object can only be updated via two methods, one is called ```setState``` the other one is ```clearState```.  Which allows some more control on how callbacks and events are dispatched/fired. This library also includes an optional way to validate state values before storage, through a  ```Model```.\r\n## Why\r\nAs I first stated this project had an educational purpose. But as I was designing it I started using it in a couple of small projects like in this [dropzone](https://codepen.io/Zorlimar/pen/jOEvzrK) component. And even though I don't think this library is mature enough to be used in a big enterprise project. It still helped me draft components faster and skip using big frameworks for small UI pieces.",
        "category": "module",
        "jumboType": "background",
        "link": "github",
        "github": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "npmjs": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "gridBackground": false
    },
    {
        "directory": "minimal_statestore",
        "path": "/minimal_statestore",
        "name": "Minimal StateStore",
        "body": "##  What \r\n I first started this project to better understand the observer pattern then I started using it for designing reusable web components.\r\n This is a small library of **~11kb** and as is name suppose is a state store so what does it mean? For short it's role is to hold data and to trigger logic when stored data is updated.\r\n## How\r\nThis project leverage javascript [ES6 Proxy](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Proxy) for the reactive part it watches an internal state object. This internal state object can only be updated via two methods, one is called ```setState``` the other one is ```clearState```.  Which allows some more control on how callbacks and events are dispatched/fired. This library also includes an optional way to validate state values before storage, through a  ```Model```.\r\n## Why\r\nAs I first stated this project had an educational purpose. But as I was designing it I started using it in a couple of small projects like in this [dropzone](https://codepen.io/Zorlimar/pen/jOEvzrK) component. And even though I don't think this library is mature enough to be used in a big enterprise project. It still helped me draft components faster and skip using big frameworks for small UI pieces.",
        "category": "module",
        "jumboType": "background",
        "link": "github",
        "github": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "npmjs": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "gridBackground": false
    },
    {
        "directory": "minimal_statestore",
        "path": "/minimal_statestore",
        "name": "Minimal StateStore",
        "body": "##  What \r\n I first started this project to better understand the observer pattern then I started using it for designing reusable web components.\r\n This is a small library of **~11kb** and as is name suppose is a state store so what does it mean? For short it's role is to hold data and to trigger logic when stored data is updated.\r\n## How\r\nThis project leverage javascript [ES6 Proxy](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Proxy) for the reactive part it watches an internal state object. This internal state object can only be updated via two methods, one is called ```setState``` the other one is ```clearState```.  Which allows some more control on how callbacks and events are dispatched/fired. This library also includes an optional way to validate state values before storage, through a  ```Model```.\r\n## Why\r\nAs I first stated this project had an educational purpose. But as I was designing it I started using it in a couple of small projects like in this [dropzone](https://codepen.io/Zorlimar/pen/jOEvzrK) component. And even though I don't think this library is mature enough to be used in a big enterprise project. It still helped me draft components faster and skip using big frameworks for small UI pieces.",
        "category": "module",
        "jumboType": "background",
        "link": "github",
        "github": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "npmjs": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "gridBackground": false
    },
    {
        "directory": "minimal_statestore",
        "path": "/minimal_statestore",
        "name": "Minimal StateStore",
        "body": "##  What \r\n I first started this project to better understand the observer pattern then I started using it for designing reusable web components.\r\n This is a small library of **~11kb** and as is name suppose is a state store so what does it mean? For short it's role is to hold data and to trigger logic when stored data is updated.\r\n## How\r\nThis project leverage javascript [ES6 Proxy](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Proxy) for the reactive part it watches an internal state object. This internal state object can only be updated via two methods, one is called ```setState``` the other one is ```clearState```.  Which allows some more control on how callbacks and events are dispatched/fired. This library also includes an optional way to validate state values before storage, through a  ```Model```.\r\n## Why\r\nAs I first stated this project had an educational purpose. But as I was designing it I started using it in a couple of small projects like in this [dropzone](https://codepen.io/Zorlimar/pen/jOEvzrK) component. And even though I don't think this library is mature enough to be used in a big enterprise project. It still helped me draft components faster and skip using big frameworks for small UI pieces.",
        "category": "module",
        "jumboType": "background",
        "link": "github",
        "github": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "npmjs": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "gridBackground": false
    },
    {
        "directory": "minimal_statestore",
        "path": "/minimal_statestore",
        "name": "Minimal StateStore",
        "body": "##  What \r\n I first started this project to better understand the observer pattern then I started using it for designing reusable web components.\r\n This is a small library of **~11kb** and as is name suppose is a state store so what does it mean? For short it's role is to hold data and to trigger logic when stored data is updated.\r\n## How\r\nThis project leverage javascript [ES6 Proxy](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Proxy) for the reactive part it watches an internal state object. This internal state object can only be updated via two methods, one is called ```setState``` the other one is ```clearState```.  Which allows some more control on how callbacks and events are dispatched/fired. This library also includes an optional way to validate state values before storage, through a  ```Model```.\r\n## Why\r\nAs I first stated this project had an educational purpose. But as I was designing it I started using it in a couple of small projects like in this [dropzone](https://codepen.io/Zorlimar/pen/jOEvzrK) component. And even though I don't think this library is mature enough to be used in a big enterprise project. It still helped me draft components faster and skip using big frameworks for small UI pieces.",
        "category": "module",
        "jumboType": "background",
        "link": "github",
        "github": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "npmjs": "https://www.npmjs.com/package/@youri-kane/minimal-statestore",
        "gridBackground": false
    }
]